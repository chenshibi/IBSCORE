package com.huateng.report.webService;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * This class was generated by Apache CXF 3.3.2
 * 2019-06-12T18:43:09.177+08:00
 * Generated source version: 3.3.2
 *
 */
@WebServiceClient(name = "PbocPortService",
                  wsdlLocation = "J:\\tools\\apache-tomcat-8.0.33-windows-x64\\apache-tomcat-8.0.33\\webapps\\IBSCORE\\creditQuery.wsdl",
                  targetNamespace = "http://ws.serviceaccept.ws.service.query.channel.pbccrc.org/")
@Component
public class PbocPortService extends Service {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(PbocPortService.class);

    public final static URL WSDL_LOCATION;
    
    public static PbocPortService  pbocPortService;
    
     @PostConstruct
	  public void init() {
    	pbocPortService=this;
	  }

    public final static QName SERVICE = new QName("http://ws.serviceaccept.ws.service.query.channel.pbccrc.org/", "PbocPortService");
    public final static QName PbocPortSoap11 = new QName("http://ws.serviceaccept.ws.service.query.channel.pbccrc.org/", "PbocPortSoap11");
    static {
        URL url = null;
        try {
            url = new URL("J:\\tools\\apache-tomcat-8.0.33-windows-x64\\apache-tomcat-8.0.33\\webapps\\IBSCORE\\creditQuery.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(PbocPortService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "J:\\tools\\apache-tomcat-8.0.33-windows-x64\\apache-tomcat-8.0.33\\webapps\\IBSCORE\\creditQuery.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public PbocPortService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PbocPortService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PbocPortService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public PbocPortService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public PbocPortService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public PbocPortService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns PbocPort
     */
    @WebEndpoint(name = "PbocPortSoap11")
    public PbocPort getPbocPortSoap11() {
        return super.getPort(PbocPortSoap11, PbocPort.class);
    }
    /**
     * 
     * @param querymessage
     * @return
     */
    public String queryCorp(String querymessage) {
    	Properties systemProps = System.getProperties();
        String proxyHost = "10.24.128.235";
        String proxyPort = "8080";
        systemProps.put("proxySet", "true");
        systemProps.put("proxyHost", proxyHost);
        systemProps.put("proxyPort", proxyPort);
        LOGGER.info("========初始化代理主机与地址为=========="+"set proxy {}:{}", proxyHost, proxyPort);
        BsCreditReportQueryReqRequest request = new BsCreditReportQueryReqRequest();
        request.setQuerymessage(querymessage);
        PbocPort pbocPort = getPbocPortSoap11(); 
        BsCreditReportQueryReqResponse response = pbocPort.bsCreditReportQueryReq(request);
        return response.getResult();
    }
    
    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PbocPort
     */
    @WebEndpoint(name = "PbocPortSoap11")
    public PbocPort getPbocPortSoap11(WebServiceFeature... features) {
        return super.getPort(PbocPortSoap11, PbocPort.class, features);
    }

}
